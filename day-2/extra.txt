A:-
function and their types - pure, lambda, arrow, self invoking
if else
for loop
for in
for of
forEach
 
B:-
while
do while
break & continue
isNaN
math function


// while loop
 
// Executes a block of code as long as specified condition is true.
 
// syntax:
 
/*

while(condition){

    // block code to execute

}

*/
 
/*

let i = 0

while(i<=5){

    console.log(i)

    i++;

}

*/

/*

Do while -  Execute the block of code once, then repeat the execution as long as specified condition is true.
 
// syntax:
 
do{

    //code to execute

} while(condition)
 
 
Example:
 
 
var i = 2

do {

   console.log(i);

   i++

}while(i<1)
 
 
break - exist the completely
 
 
let i;

for (let i=0; i<5; i++){

    if(i===3)

    break;

    console.log(i)

}
 
 
continue: skips the current execution and continues to the next one.
 
let i;

for (let i=0; i<5; i++){

    if(i===3)

    continue;

    console.log(i)

}

*/
 
Math 

- Round - nearest value round 

- Floor - round down 

- ceil - round up

- min - find minimum value

- max -> find max value

- random -> create random value

- sqrt -> for square root

- pow
 
 
const PI = Math.PI

console.log(PI) // 3.141592653589793

console.log(Math.round(PI)) // 3; to round values to the nearest number

console.log(Math.round(9.81)) // 10

console.log(Math.floor(PI)) // 3; rounding down

console.log(Math.ceil(PI)) // 4; rounding up

console.log(Math.min(-5, 3, 20, 4, 5, 10)) // -5, returns the minimum value

console.log(Math.max(-5, 3, 20, 4, 5, 10)) // 20, returns the maximum value
 
const randNum = Math.random() // creates random number between 0 to 0.999999

console.log(randNum)
 
const num = Math.floor(Math.random() * 11) // creates random number between 0 and 10

console.log(num)
 
console.log(Math.sqrt(25))
 
console.log(Math.sqrt(2))
 
console.log(Math.pow(3, 2))
 
const arr = [1,2,3,4,8]

const lowestNum = Math.min(...arr)

console.log(lowestNum)
 
const arr = [1,2,3,4,8]

const lowestNum = Math.max(...arr)

console.log(lowestNum)
 
 
NaN is used in JavaScript to represent a value that is mathematically invalid or unrepresentable.
 
JavaScript provides a special function isNaN() to check whether a value is NaN
 
represents error in numeric computations:


if else
 

// if else
// condition checking
 
// let num=-5;
// if(num>0){
//     console.log("+ve num");
// }else{
//     console.log("-ve num");
// }
 
// nested if else
// let num=4;
// if(num>0){
//     // console.log("+ve num");
//     if(num%2==0){
//         console.log("even number");
//     }else{
//         console.log("odd number");
//     }
// }else{
//     console.log("-ve num");
// }
 
// if else ladder
 
// let marks=95;
 
// if(marks>90){
//     console.log("First class")
// }else if(marks<90 && marks>80){
//      console.log("Second class")
// }else if(marks<80 && marks>60){
//     console.log("Third class")
// }else{
//     console.log("Failed")
// }
 
for loop
// for loop
// execution is continue untill condition is false
// syntax:-
// for (initialize; condition; increment/decrement){.....}
 
// for (let i=0; i<5; i++){
//     console.log("Sorry");
// }
 
for in
for of
// for in
// display index of the arrays
// also work on object - shows the keys of object
const a=[8,9,10];
 
for (let x in a){
    // console.log(x)
}
 
// for of
// display value of the arrays
// not work for object
for (let y of a){
    // console.log(y)
}
 
const name={
    fname:"abc",
    lname:"xyz",
    company:"eClerx"
}
 
for (let key of name){
    console.log(key)
}
 
forEach
// forEach
// apply on array but it cannot give the array as a result
// does not change the original array
// const a=[1,2,3,4];
// a.forEach((num)=>{
//   console.log(num*2);
// });
 
// map:-
// apply on aaray, but it gives the new array as a result
// does not change the original aaray
// let res= a.map((num)=>{
//     return num*2;
// })
// console.log(res)

